name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * 1' # Weekly health check on Mondays at 6 AM

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write
  checks: write

concurrency:
  group: 'ci-${{ github.ref }}'
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  NODE_VERSION: '22'
  CACHE_VERSION: 'v1'

jobs:
  # 🔍 Code Quality & Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .astro
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npx astro check

      - name: Lint check
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Security audit
        run: |
          npm audit --audit-level=moderate || {
            echo "⚠️ Security vulnerabilities found. Please review and fix."
            npm audit --audit-level=moderate --json > audit-results.json
            exit 1
          }

      - name: License compliance check
        run: |
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'

  # 🔨 Build & Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies cache
        if: needs.quality-checks.outputs.cache-hit == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .astro
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: needs.quality-checks.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test build output
        run: |
          # 檢查 dist 目錄是否存在且不為空
          if [ ! -d "./dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi

          # 檢查是否有 HTML 檔案
          html_count=$(find ./dist -name '*.html' | wc -l)
          if [ $html_count -eq 0 ]; then
            echo "❌ Build failed: no HTML files found"
            exit 1
          fi

          # 檢查關鍵檔案
          required_files=("index.html" "resume/index.html" "en/index.html" "zh/index.html")
          for file in "${required_files[@]}"; do
            if [ ! -f "./dist/$file" ]; then
              echo "⚠️ Warning: Required file $file not found"
            fi
          done

          echo "✅ Build successful: found $html_count HTML files"

          # 分析 bundle 大小
          echo "📊 Bundle analysis:"
          du -sh ./dist
          find ./dist -name "*.js" -exec du -h {} \; | sort -hr | head -5

      - name: Upload build artifacts (Node.js ${{ matrix.node-version }})
        uses: actions/upload-artifact@v4
        with:
          name: build-output-node-${{ matrix.node-version }}
          path: ./dist
          retention-days: 30

  # 🧪 End-to-End Testing
  e2e-test:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-node-22
          path: ./dist

      - name: Basic smoke tests
        run: |
          # 檢查重要頁面內容
          if ! grep -q "Way Hong" ./dist/index.html; then
            echo "❌ Homepage content check failed"
            exit 1
          fi

          if ! grep -q "resume" ./dist/en/index.html; then
            echo "❌ English page content check failed"
            exit 1
          fi

          echo "✅ Content validation passed"

  # 🚀 Deploy to GitHub Pages (only on main branch)
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output-node-22
          path: ./dist

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment health check
        run: |
          echo "🔍 Performing post-deployment health check..."
          sleep 30  # Wait for deployment to propagate

          # Check if site is accessible
          if curl -sSf "https://wayhong0928.github.io" > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site accessibility check failed"
            exit 1
          fi

  # 📊 Report Results
  report:
    name: Report Results
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test, e2e-test, deploy]
    if: always()
    steps:
      - name: Generate comprehensive report
        run: |
          echo "## 🎯 Enhanced CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Testing | ${{ needs.e2e-test.result == 'success' && '✅ Passed' || needs.e2e-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result == 'success' && '✅ Deployed' || needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Live Site**: https://wayhong0928.github.io" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          # Add performance insights
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Performance Insights" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-version testing: Node.js 20 & 22" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel execution for faster CI" >> $GITHUB_STEP_SUMMARY
          echo "- Intelligent caching enabled" >> $GITHUB_STEP_SUMMARY
          echo "- Post-deployment health checks" >> $GITHUB_STEP_SUMMARY
