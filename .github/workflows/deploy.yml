name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # 🔍 Code Quality & Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npx astro check

      - name: Lint check
        run: |
          # 如果有 ESLint 配置，執行 lint
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npm run lint || echo "No lint script found"
          else
            echo "No ESLint configuration found, skipping lint"
          fi

      - name: Format check
        run: |
          # 檢查 Prettier 格式
          if [ -f ".prettierrc" ] || [ -f "prettier.config.cjs" ]; then
            npx prettier --check . || echo "Prettier check failed"
          else
            echo "No Prettier configuration found, skipping format check"
          fi

      - name: Security audit
        run: npm audit --audit-level=moderate

  # 🔨 Build & Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test build output
        run: |
          # 檢查 dist 目錄是否存在且不為空
          if [ ! -d "./dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          
          # 檢查是否有 HTML 檔案
          if [ -z "$(find ./dist -name '*.html')" ]; then
            echo "❌ Build failed: no HTML files found"
            exit 1
          fi
          
          echo "✅ Build successful: found $(find ./dist -name '*.html' | wc -l) HTML files"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./dist
          retention-days: 30

  # 🚀 Deploy to GitHub Pages (only on main branch)
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./dist

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 📊 Report Results
  report:
    name: Report Results
    runs-on: ubuntu-latest
    needs: [quality-checks, build-test, deploy]
    if: always()
    steps:
      - name: Report Status
        run: |
          echo "## 🎯 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result == 'success' && '✅ Deployed' || needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Site URL:** https://wayhong0928.github.io" >> $GITHUB_STEP_SUMMARY
